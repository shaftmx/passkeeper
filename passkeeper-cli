#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Author: GaÃ«l Lambert (gaelL) <gael.lambert@netwiki.fr>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import argparse
import logging
from passkeeper import Passkeeper
from passkeeper.tools import *
from getpass import getpass

def init_logger():
    # Init logging level with debug stream handler
    log = logging.getLogger()
    log.setLevel(logging.INFO)
    #log.setLevel(logging.DEBUG)
    logformat =  '%(asctime)s %(levelname)s -: %(message)s'
    # Set logger formater
    formatter = logging.Formatter(logformat)
    # Stream handler
    hdl = logging.StreamHandler()
    hdl.setFormatter(formatter)
    log.addHandler(hdl)
    ## File handler
    #hdl = logging.FileHandler('/tmp/%s.log' % __name__)
    #hdl.setFormatter(formatter)
    #log.addHandler(hdl)
    return log

def init_argparse():
    parser = argparse.ArgumentParser()
    parser.add_argument("-D", "--directory",
                        help="Directory wich contain passkeeper ini files",
                        metavar="DIRECTORY",
                        type=str,
                        required=True)
    parser.add_argument("-s", "--search",
                        help="Search pattern in *.ini",
                        metavar="PATTERN",
                        type=str)
    parser.add_argument("--init",
                        help="Create and init new passkeeper directory",
                        action='store_true')
    parser.add_argument("--flush-history",
                        help="Flush git history to increase security",
                        action='store_true')
    parser.add_argument("-d", '--decrypt',
                        help="Decrypt all .passkeeper files",
                        action='store_true')
    parser.add_argument("-e", '--encrypt',
                        help="Decrypt all .ini files",
                        action='store_true')
    parser.add_argument("-c", '--clean',
                        help="Clean decrypted files (only).",
                        action='store_true')
    parser.add_argument("-m", "--commit-message",
                        help="Commit with a specific message",
                        metavar="MESSAGE",
                        type=str)
    return parser.parse_args()

if __name__ == '__main__':
    # init
    log = init_logger()
    args = init_argparse()

    pk = Passkeeper(directory=args.directory)

    # Init new directory
    if args.init:
        pk.init_dir(passphrase=getpass())
    # Decrypt files
    elif args.decrypt:
        pk.decrypt(passphrase=getpass())
    # Search in files
    elif args.search:
        config, matching = pk.search(args.search)
        pk.print_sections(config=config,
                          pattern=args.search,
                          matching_sections=matching)
    # Encrypt files
    elif args.encrypt:

        passphrase = getpass()
        passphrase_confirm = getpass('Confirm: ')
        if passphrase != passphrase_confirm:
            print ('Password and confirm are different')
            exit(1)

        if args.commit_message:
            status = pk.encrypt(passphrase=passphrase,
                                commit_message=args.commit_message)
        else:
            status = pk.encrypt(passphrase=passphrase)
        if status:
            # Delete non present files
            pk.remove_old_encrypted_files()

            # Purge deleted file before encrypt
            pk.cleanup()
    # Clean git history    
    elif args.flush_history:
        pk.flush_history()
    # Clean all files     
    elif args.clean:
        pk.cleanup()
